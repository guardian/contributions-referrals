AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: The lambda to write referral codes to RDS

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: support
  Stage:
    Description: Set by RiffRaff on each deploy
    Type: String
    AllowedValues:
      - CODE
      - PROD
  DeployBucket:
    Description: Bucket to copy files to
    Type: String
    Default: membership-dist
  SecurityGroupToAccessPostgres:
    Description: Security group to access the RDS instance
    Type: String
  VpcSubnets:
    Description: Subnets for RDS access
    Type: List<AWS::EC2::Subnet::Id>
  StreamArn:
    Description: ARN of the kinesis stream
    Type: String
  CertificateArn:
    Description: ARN of the certificate
    Type: String

Mappings:
  StageMap:
    CODE:
      DomainName: contribution-referrals-code.support.guardianapis.com
      CorsOrigin: "'*'"
    PROD:
      DomainName: contribution-referrals.support.guardianapis.com
      CorsOrigin: "'*'"

Conditions:
  IsProd: !Equals [ !Ref Stage, "PROD" ]

Globals:
  Api:
    Cors:
      AllowOrigin: !FindInMap [ StageMap, !Ref Stage, CorsOrigin ]
      AllowHeaders: "'Content-Type'"
      AllowMethods: "'*'"

Resources:

  ReferralCodeQueue:
    Type: AWS::SQS::Queue

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: ApiQueuePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt ReferralCodeQueue.Arn
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt ReferralCountLambda.Arn

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        paths:
          "/referral-count":
            "get":
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayRole.Arn
                httpMethod: "POST"
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ReferralCountLambda}/invocations"
          "/referral-code-queue":
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      "application/json": "#set($inputRoot = $input.path('$'))"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json: !Sub "Action=SendMessage##\n&QueueUrl=$util.urlEncode('${ReferralCodeQueue}')##\n\
                      &MessageBody=$util.urlEncode($input.body)##\n"
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

  WriteReferralCodeToRdsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub contributions-referrals-create-code-${Stage}
      Description: A lambda for saving referral codes to rds
      Runtime: nodejs12.x
      Handler: create-code/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/contributions-referrals/contributions-referrals.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/contributions-referrals/db-config/${Stage}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/contributions-referrals/idapi/${Stage}/*
        Statement:
          Effect: Allow
          Action: s3:GetObject
          Resource:
            - arn:aws:s3::*:membership-dist/*
      ReservedConcurrentExecutions: 10
      Events:
        QueueMessages:
          Type: SQS
          Properties:
            Queue: !GetAtt ReferralCodeQueue.Arn
            BatchSize: 10

  ReferralCountLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub contributions-referrals-referral-count-${Stage}
      Description: A lambda for fetching a referral count for a braze user
      Runtime: nodejs12.x
      Handler: referral-count/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/contributions-referrals/contributions-referrals.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/contributions-referrals/db-config/${Stage}
        Statement:
          Effect: Allow
          Action: s3:GetObject
          Resource:
            - arn:aws:s3::*:membership-dist/*
      Events:
        HttpGet:
          Type: Api
          Properties:
            Path: '/referral-count'
            Method: get
            Auth:
              ApiKeyRequired: true
            RestApiId: !Ref ApiGateway

  BrazeUploadLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub contributions-referrals-braze-upload-${Stage}
      Description: The lambda to send referrals data to Braze
      Runtime: nodejs12.x
      Handler: braze-upload/lambda/lambda.handler
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          Stage: !Ref Stage
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/contributions-referrals/contributions-referrals.zip
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupToAccessPostgres
        SubnetIds: !Ref VpcSubnets
      Policies:
        # there are some extra permissions needed for a lambda to access resources in a VPC
        # https://docs.aws.amazon.com/lambda/latest/dg/vpc.html
        # hence this role rather than BasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            Effect: Allow
            Action:
              - ssm:GetParametersByPath
              - ssm:GetParameter
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/contributions-referrals/db-config/${Stage}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/contributions-referrals/braze/${Stage}/*
        Statement:
          Effect: Allow
          Action: s3:GetObject
          Resource:
            - arn:aws:s3::*:membership-dist/*
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !Ref StreamArn
            BatchSize: 10
            StartingPosition: LATEST
            MaximumRetryAttempts: 0

  DomainName:
    Type: "AWS::ApiGateway::DomainName"
    Properties:
      RegionalCertificateArn: # only for *.support.guardianapis.com
        !Ref CertificateArn
      DomainName: !FindInMap [ StageMap, !Ref Stage, DomainName ]
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    Type: "AWS::ApiGateway::BasePathMapping"
    Properties:
      RestApiId: !Ref ApiGateway
      DomainName: !Ref DomainName
      Stage: !Sub Prod
    DependsOn: ApiGatewayProdStage # auto generated by the Transform

  APIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Description: Key required for requests from braze
      Enabled: true
      Name: !Sub contributions-referrals-api-key-${Stage}
      StageKeys:
        - RestApiId: !Ref ApiGateway
          StageName: !Sub Prod
    DependsOn: ApiGatewayProdStage # auto generated by the Transform

  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: !Sub contributions-referrals-api-usage-plan-${Stage}
      ApiStages:
        - ApiId: !Ref ApiGateway
          Stage: Prod
    DependsOn: ApiGatewayProdStage # auto generated by the Transform

  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan
    DependsOn:
      - APIKey
      - UsagePlan

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: support.guardianapis.com.
      Name: !FindInMap [ StageMap, !Ref Stage, DomainName ]
      Comment: !Sub CNAME for contributions referrals endpoint ${Stage}
      Type: CNAME
      TTL: '120'
      ResourceRecords:
        - !GetAtt [ DomainName, RegionalDomainName ]

  WriteReferralCodeToRdsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: Failed to write a referral code to the database
      AlarmDescription: User's referral code is not being stored
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref WriteReferralCodeToRdsLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 600
      EvaluationPeriods: 1
      Statistic: Sum

  BrazeUploadAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: Failed to process acquisition in braze-upload lambda
      AlarmDescription: Referral may not have been recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref BrazeUploadLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 600
      EvaluationPeriods: 1
      Statistic: Sum

  ReferralCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProd
    Properties:
      AlarmActions:
        - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:contributions-dev
      AlarmName: Request for a referral count failed
      AlarmDescription: Braze was unable to fetch a referral count
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref ReferralCountLambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 600
      EvaluationPeriods: 1
      Statistic: Sum
