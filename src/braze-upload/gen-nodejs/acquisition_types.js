//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
ttypes.Product = {
  'CONTRIBUTION' : 1,
  'RECURRING_CONTRIBUTION' : 2,
  'MEMBERSHIP_SUPPORTER' : 3,
  'MEMBERSHIP_PATRON' : 4,
  'MEMBERSHIP_PARTNER' : 5,
  'DIGITAL_SUBSCRIPTION' : 6,
  'PAPER_SUBSCRIPTION_EVERYDAY' : 7,
  'PAPER_SUBSCRIPTION_SIXDAY' : 8,
  'PAPER_SUBSCRIPTION_WEEKEND' : 9,
  'PAPER_SUBSCRIPTION_SUNDAY' : 10,
  'PRINT_SUBSCRIPTION' : 11,
  'APP_PREMIUM_TIER' : 12
};
var QueryParameter = module.exports.QueryParameter = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field value is unset!');
    }
  }
};
QueryParameter.prototype = {};
QueryParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryParameter.prototype.write = function(output) {
  output.writeStructBegin('QueryParameter');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Acquisition = module.exports.Acquisition = function(args) {
  this.product = null;
  this.queryParameters = null;
  if (args) {
    if (args.product !== undefined && args.product !== null) {
      this.product = args.product;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field product is unset!');
    }
    if (args.queryParameters !== undefined && args.queryParameters !== null) {
      this.queryParameters = Thrift.copyList(args.queryParameters, [ttypes.QueryParameter]);
    }
  }
};
Acquisition.prototype = {};
Acquisition.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.product = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.SET) {
        this.queryParameters = [];
        var _rtmp31 = input.readSetBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.QueryParameter();
          elem3.read(input);
          this.queryParameters.push(elem3);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Acquisition.prototype.write = function(output) {
  output.writeStructBegin('Acquisition');
  if (this.product !== null && this.product !== undefined) {
    output.writeFieldBegin('product', Thrift.Type.I32, 1);
    output.writeI32(this.product);
    output.writeFieldEnd();
  }
  if (this.queryParameters !== null && this.queryParameters !== undefined) {
    output.writeFieldBegin('queryParameters', Thrift.Type.SET, 25);
    output.writeSetBegin(Thrift.Type.STRUCT, this.queryParameters.length);
    for (var iter4 in this.queryParameters) {
      if (this.queryParameters.hasOwnProperty(iter4)) {
        iter4 = this.queryParameters[iter4];
        iter4.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

